# coding: utf-8

"""
    Q&A Platform API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InfoOfferReadPrivate(BaseModel):
    """
    InfoOfferReadPrivate
    """ # noqa: E501
    id: StrictInt
    human_seller_id: Optional[StrictInt]
    bot_seller_id: Optional[StrictInt]
    seller_type: StrictStr
    context_id: StrictInt
    public_info: Optional[StrictStr]
    price: Union[StrictFloat, StrictInt]
    created_at: datetime
    private_info: StrictStr
    __properties: ClassVar[List[str]] = ["id", "human_seller_id", "bot_seller_id", "seller_type", "context_id", "public_info", "price", "created_at", "private_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InfoOfferReadPrivate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if human_seller_id (nullable) is None
        # and model_fields_set contains the field
        if self.human_seller_id is None and "human_seller_id" in self.model_fields_set:
            _dict['human_seller_id'] = None

        # set to None if bot_seller_id (nullable) is None
        # and model_fields_set contains the field
        if self.bot_seller_id is None and "bot_seller_id" in self.model_fields_set:
            _dict['bot_seller_id'] = None

        # set to None if public_info (nullable) is None
        # and model_fields_set contains the field
        if self.public_info is None and "public_info" in self.model_fields_set:
            _dict['public_info'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InfoOfferReadPrivate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "human_seller_id": obj.get("human_seller_id"),
            "bot_seller_id": obj.get("bot_seller_id"),
            "seller_type": obj.get("seller_type"),
            "context_id": obj.get("context_id"),
            "public_info": obj.get("public_info"),
            "price": obj.get("price"),
            "created_at": obj.get("created_at"),
            "private_info": obj.get("private_info")
        })
        return _obj


