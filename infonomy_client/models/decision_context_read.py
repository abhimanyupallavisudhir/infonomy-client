# coding: utf-8

"""
    Q&A Platform API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DecisionContextRead(BaseModel):
    """
    DecisionContextRead
    """ # noqa: E501
    id: StrictInt
    query: Optional[StrictStr]
    context_pages: Optional[List[StrictStr]]
    buyer_id: StrictInt
    max_budget: Union[StrictFloat, StrictInt]
    seller_ids: Optional[List[StrictInt]]
    priority: StrictInt
    created_at: datetime
    parent: Optional[DecisionContextRead]
    __properties: ClassVar[List[str]] = ["id", "query", "context_pages", "buyer_id", "max_budget", "seller_ids", "priority", "created_at", "parent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DecisionContextRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # set to None if query (nullable) is None
        # and model_fields_set contains the field
        if self.query is None and "query" in self.model_fields_set:
            _dict['query'] = None

        # set to None if context_pages (nullable) is None
        # and model_fields_set contains the field
        if self.context_pages is None and "context_pages" in self.model_fields_set:
            _dict['context_pages'] = None

        # set to None if seller_ids (nullable) is None
        # and model_fields_set contains the field
        if self.seller_ids is None and "seller_ids" in self.model_fields_set:
            _dict['seller_ids'] = None

        # set to None if parent (nullable) is None
        # and model_fields_set contains the field
        if self.parent is None and "parent" in self.model_fields_set:
            _dict['parent'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DecisionContextRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "query": obj.get("query"),
            "context_pages": obj.get("context_pages"),
            "buyer_id": obj.get("buyer_id"),
            "max_budget": obj.get("max_budget"),
            "seller_ids": obj.get("seller_ids"),
            "priority": obj.get("priority"),
            "created_at": obj.get("created_at"),
            "parent": DecisionContextRead.from_dict(obj["parent"]) if obj.get("parent") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
DecisionContextRead.model_rebuild(raise_errors=False)

