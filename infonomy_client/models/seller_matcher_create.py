# coding: utf-8

"""
    Infonomy

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SellerMatcherCreate(BaseModel):
    """
    SellerMatcherCreate
    """ # noqa: E501
    keywords: Optional[List[StrictStr]] = None
    context_pages: Optional[List[StrictStr]] = None
    min_max_budget: Optional[Union[StrictFloat, StrictInt]] = 0.0
    min_inspection_rate: Optional[Union[StrictFloat, StrictInt]] = 0.0
    min_purchase_rate: Optional[Union[StrictFloat, StrictInt]] = 0.0
    min_priority: Optional[StrictInt] = 0
    buyer_type: Optional[StrictStr] = None
    buyer_llm_model: Optional[List[StrictStr]] = None
    buyer_system_prompt: Optional[List[StrictStr]] = None
    age_limit: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["keywords", "context_pages", "min_max_budget", "min_inspection_rate", "min_purchase_rate", "min_priority", "buyer_type", "buyer_llm_model", "buyer_system_prompt", "age_limit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SellerMatcherCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if keywords (nullable) is None
        # and model_fields_set contains the field
        if self.keywords is None and "keywords" in self.model_fields_set:
            _dict['keywords'] = None

        # set to None if context_pages (nullable) is None
        # and model_fields_set contains the field
        if self.context_pages is None and "context_pages" in self.model_fields_set:
            _dict['context_pages'] = None

        # set to None if buyer_type (nullable) is None
        # and model_fields_set contains the field
        if self.buyer_type is None and "buyer_type" in self.model_fields_set:
            _dict['buyer_type'] = None

        # set to None if buyer_llm_model (nullable) is None
        # and model_fields_set contains the field
        if self.buyer_llm_model is None and "buyer_llm_model" in self.model_fields_set:
            _dict['buyer_llm_model'] = None

        # set to None if buyer_system_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.buyer_system_prompt is None and "buyer_system_prompt" in self.model_fields_set:
            _dict['buyer_system_prompt'] = None

        # set to None if age_limit (nullable) is None
        # and model_fields_set contains the field
        if self.age_limit is None and "age_limit" in self.model_fields_set:
            _dict['age_limit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SellerMatcherCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keywords": obj.get("keywords"),
            "context_pages": obj.get("context_pages"),
            "min_max_budget": obj.get("min_max_budget") if obj.get("min_max_budget") is not None else 0.0,
            "min_inspection_rate": obj.get("min_inspection_rate") if obj.get("min_inspection_rate") is not None else 0.0,
            "min_purchase_rate": obj.get("min_purchase_rate") if obj.get("min_purchase_rate") is not None else 0.0,
            "min_priority": obj.get("min_priority") if obj.get("min_priority") is not None else 0,
            "buyer_type": obj.get("buyer_type"),
            "buyer_llm_model": obj.get("buyer_llm_model"),
            "buyer_system_prompt": obj.get("buyer_system_prompt"),
            "age_limit": obj.get("age_limit")
        })
        return _obj


