# coding: utf-8

"""
    Q&A Platform API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from infonomy_client.models.seller_matcher_read import SellerMatcherRead
from typing import Optional, Set
from typing_extensions import Self

class BotSellerRead(BaseModel):
    """
    BotSellerRead
    """ # noqa: E501
    id: StrictInt
    type: StrictStr
    matchers: List[SellerMatcherRead]
    user_id: StrictInt
    info: Optional[StrictStr]
    price: Optional[Union[StrictFloat, StrictInt]]
    llm_model: Optional[StrictStr]
    llm_prompt: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["id", "type", "matchers", "user_id", "info", "price", "llm_model", "llm_prompt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BotSellerRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in matchers (list)
        _items = []
        if self.matchers:
            for _item_matchers in self.matchers:
                if _item_matchers:
                    _items.append(_item_matchers.to_dict())
            _dict['matchers'] = _items
        # set to None if info (nullable) is None
        # and model_fields_set contains the field
        if self.info is None and "info" in self.model_fields_set:
            _dict['info'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        # set to None if llm_model (nullable) is None
        # and model_fields_set contains the field
        if self.llm_model is None and "llm_model" in self.model_fields_set:
            _dict['llm_model'] = None

        # set to None if llm_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.llm_prompt is None and "llm_prompt" in self.model_fields_set:
            _dict['llm_prompt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BotSellerRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "matchers": [SellerMatcherRead.from_dict(_item) for _item in obj["matchers"]] if obj.get("matchers") is not None else None,
            "user_id": obj.get("user_id"),
            "info": obj.get("info"),
            "price": obj.get("price"),
            "llm_model": obj.get("llm_model"),
            "llm_prompt": obj.get("llm_prompt")
        })
        return _obj


