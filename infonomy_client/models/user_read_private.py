# coding: utf-8

"""
    Q&A Platform API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from infonomy_client.models.bot_seller_read import BotSellerRead
from infonomy_client.models.human_buyer_read import HumanBuyerRead
from infonomy_client.models.human_seller_read import HumanSellerRead
from typing import Optional, Set
from typing_extensions import Self

class UserReadPrivate(BaseModel):
    """
    UserReadPrivate
    """ # noqa: E501
    id: StrictInt
    email: StrictStr
    is_active: Optional[StrictBool] = True
    is_superuser: Optional[StrictBool] = False
    is_verified: Optional[StrictBool] = False
    username: StrictStr
    created_at: datetime
    last_login_date: Optional[datetime]
    balance: Union[StrictFloat, StrictInt]
    available_balance: Union[StrictFloat, StrictInt]
    daily_bonus_amount: Union[StrictFloat, StrictInt]
    buyer_profile: Optional[HumanBuyerRead]
    seller_profile: Optional[HumanSellerRead]
    bot_sellers: Optional[List[BotSellerRead]]
    api_keys: Dict[str, Any]
    __properties: ClassVar[List[str]] = ["id", "email", "is_active", "is_superuser", "is_verified", "username", "created_at", "last_login_date", "balance", "available_balance", "daily_bonus_amount", "buyer_profile", "seller_profile", "bot_sellers", "api_keys"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserReadPrivate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of buyer_profile
        if self.buyer_profile:
            _dict['buyer_profile'] = self.buyer_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seller_profile
        if self.seller_profile:
            _dict['seller_profile'] = self.seller_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bot_sellers (list)
        _items = []
        if self.bot_sellers:
            for _item_bot_sellers in self.bot_sellers:
                if _item_bot_sellers:
                    _items.append(_item_bot_sellers.to_dict())
            _dict['bot_sellers'] = _items
        # set to None if last_login_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_login_date is None and "last_login_date" in self.model_fields_set:
            _dict['last_login_date'] = None

        # set to None if buyer_profile (nullable) is None
        # and model_fields_set contains the field
        if self.buyer_profile is None and "buyer_profile" in self.model_fields_set:
            _dict['buyer_profile'] = None

        # set to None if seller_profile (nullable) is None
        # and model_fields_set contains the field
        if self.seller_profile is None and "seller_profile" in self.model_fields_set:
            _dict['seller_profile'] = None

        # set to None if bot_sellers (nullable) is None
        # and model_fields_set contains the field
        if self.bot_sellers is None and "bot_sellers" in self.model_fields_set:
            _dict['bot_sellers'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserReadPrivate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "email": obj.get("email"),
            "is_active": obj.get("is_active") if obj.get("is_active") is not None else True,
            "is_superuser": obj.get("is_superuser") if obj.get("is_superuser") is not None else False,
            "is_verified": obj.get("is_verified") if obj.get("is_verified") is not None else False,
            "username": obj.get("username"),
            "created_at": obj.get("created_at"),
            "last_login_date": obj.get("last_login_date"),
            "balance": obj.get("balance"),
            "available_balance": obj.get("available_balance"),
            "daily_bonus_amount": obj.get("daily_bonus_amount"),
            "buyer_profile": HumanBuyerRead.from_dict(obj["buyer_profile"]) if obj.get("buyer_profile") is not None else None,
            "seller_profile": HumanSellerRead.from_dict(obj["seller_profile"]) if obj.get("seller_profile") is not None else None,
            "bot_sellers": [BotSellerRead.from_dict(_item) for _item in obj["bot_sellers"]] if obj.get("bot_sellers") is not None else None,
            "api_keys": obj.get("api_keys")
        })
        return _obj


